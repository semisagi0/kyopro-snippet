<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>mywindows</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension Sequence {
    /// ```
    /// assert([].windows(2) == [])
    /// assert([1].windows(2) == [])
    /// assert([1, 2, 3, 4, 5].windows(2) == [[1, 2], [2, 3], [3, 4], [4, 5]])
    /// assert([1, 2, 3, 4, 5].windows(3) == [[1, 2, 3], [2, 3, 4], [3, 4, 5]])
    /// ```
    func windows(_ size: Int) -&gt; [[Element]] {
        precondition(size &gt;= 1)
        let array = Array(self)
        guard array.count &gt;= size else { return [] }
        var result: [[Element]] = []
        for i in 0 ... array.count - size {
            result.append(Array(array[i ..&lt; i + size]))
        }
        return result
    }

    /// ```
    /// assert([].paired() == []) // compile error
    /// assert([1].paired() == []) // compile error
    /// assert([1, 2, 3, 4, 5].pairWindows() == [(1, 2), (2, 3), (3, 4), (4, 5)]) // compile error
    /// ```
    func paired() -&gt; [(Element, Element)] {
        windows(2).map { ($0[0], $0[1]) }
    }
}

func testWindows() {
    assert(([] as [Int]).windows(2) == [])
    assert([1].windows(2) == [])
    assert([1, 2, 3, 4, 5].windows(2) == [[1, 2], [2, 3], [3, 4], [4, 5]])
    assert([1, 2, 3, 4, 5].windows(3) == [[1, 2, 3], [2, 3, 4], [3, 4, 5]])
}

testWindows()
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>B9811617-C1EB-46CC-A8E2-0036F17E8E7E</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Windows</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
