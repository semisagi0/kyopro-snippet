<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myarray2d</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// snippet_id: 27d5b702-c362-4a2b-a2da-9f0f366e72b2
// https://github.com/semisagi0/kyopro-snippet
struct Array2D&lt;Element&gt; {
    let n1: Int
    let n2: Int
    private var elements: [Element]

    init(repeating: Element, _ n1: Int, _ n2: Int) {
        precondition(n1 &gt;= 0)
        precondition(n2 &gt;= 0)
        self.n1 = n1
        self.n2 = n2
        self.elements = [Element](repeating: repeating, count: n1 * n2)
    }

    init(_ array: [[Element]]) {
        if array.isEmpty {
            self.n1 = 0
            self.n2 = 0
            self.elements = []
            return
        }
        self.n1 = array.count
        self.n2 = array[0].count
        self.elements = [Element]()
        for i in 0 ..&lt; array.count {
            for j in 0 ..&lt; array[i].count {
                self.elements.append(array[i][j])
            }
        }
    }

    subscript(i: Int, j: Int) -&gt; Element {
        get {
#if DEBUG
            precondition(0 &lt;= i &amp;&amp; i &lt; n1)
            precondition(0 &lt;= j &amp;&amp; j &lt; n2)
#endif
            return elements[i * n2 + j]
        }
        set {
#if DEBUG
            precondition(0 &lt;= i &amp;&amp; i &lt; n1)
            precondition(0 &lt;= j &amp;&amp; j &lt; n2)
#endif
            elements[i * n2 + j] = newValue
        }
    }

    func row(_ i: Int) -&gt; [Element] {
        (0 ..&lt; n2).map { self[i, $0] }
    }

    func column(_ j: Int) -&gt; [Element] {
        (0 ..&lt; n1).map { self[$0, j] }
    }
}

extension Array2D: CustomDebugStringConvertible {
    var debugDescription: String {
        "[\n    " + (0 ..&lt; n1).map { row($0).debugDescription }.joined(separator: ",\n    ") + "\n]"
    }
}

func testArray2D() {
    func testDebugStringConvertible() {
        let array = Array2D([[1, 2, 3], [4, 5, 6]])
        assert(array.debugDescription ==
"""
[
    [1, 2, 3],
    [4, 5, 6]
]
""")
    }

    testDebugStringConvertible()
}

testArray2D()
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>AE059F8C-58B8-4DDC-8A6B-D3FCC6D41A6D</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Array2D</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
