<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>mystaticrangesum2d</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// snippet_id: 8f2a8e1d-6970-42ee-bc6d-4f1bc819847d
// https://github.com/semisagi0/kyopro-snippet
struct StaticRangeSum2D&lt;Element&gt; where Element: AdditiveArithmetic {
    private var sum: Array2D&lt;Element&gt;

    init(_ array: Array2D&lt;Element&gt;) {
        sum = Array2D&lt;Element&gt;(repeating: .zero, array.n1 + 1, array.n2 + 1)
        for i in 0 ..&lt; array.n1 {
            for j in 0 ..&lt; array.n2 {
                sum[i + 1, j + 1] = sum[i, j + 1] + sum[i + 1, j] - sum[i, j] + array[i, j]
            }
        }
    }

    subscript(range1: Range&lt;Int&gt;, range2: Range&lt;Int&gt;) -&gt; Element {
        sum[range1.upperBound, range2.upperBound] - sum[range1.lowerBound, range2.upperBound] - sum[range1.upperBound, range2.lowerBound] + sum[range1.lowerBound, range2.lowerBound]
    }

    subscript(range1: UnboundedRange, range2: UnboundedRange) -&gt; Element {
        self[0 ..&lt; sum.n1 - 1, 0 ..&lt; sum.n2 - 1]
    }

    subscript&lt;R1&gt;(range1: R1, range2: UnboundedRange) -&gt; Element where R1: RangeExpression, R1.Bound == Int {
        self[range1.relative(to: 0 ..&lt; sum.n1 - 1), 0 ..&lt; sum.n2 - 1]
    }

    subscript&lt;R2&gt;(range1: UnboundedRange, range2: R2) -&gt; Element where R2: RangeExpression, R2.Bound == Int {
        self[0 ..&lt; sum.n1 - 1, range2.relative(to: 0 ..&lt; sum.n2 - 1)]
    }

    subscript&lt;R1, R2&gt;(range1: R1, range2: R2) -&gt; Element where R1: RangeExpression, R2: RangeExpression, R1.Bound == Int, R2.Bound == Int {
        self[range1.relative(to: 0 ..&lt; sum.n1 - 1), range2.relative(to: 0 ..&lt; sum.n2 - 1)]
    }
}

func testStaticRangeSum2D() {
    let sum = StaticRangeSum2D(
        Array2D([
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
        ])
    )

    assert(sum[0 ..&lt; 3, 0 ..&lt; 3] == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9)
    assert(sum[0 ..&lt; 3, 0 ..&lt; 2] == 1 + 2 + 4 + 5 + 7 + 8)
    assert(sum[0 ..&lt; 2, 0 ..&lt; 2] == 1 + 2 + 4 + 5)
    assert(sum[1 ..&lt; 2, 1 ..&lt; 2] == 5)
    assert(sum[1 ..&lt; 2, 1 ..&lt; 3] == 5 + 6)
    assert(sum[1 ..&lt; 3, 1 ..&lt; 3] == 5 + 6 + 8 + 9)
    assert(sum[2 ..&lt; 3, 2 ..&lt; 3] == 9)
    assert(sum[3 ..&lt; 3, 0 ..&lt; 3] == 0)
    assert(sum[0 ..&lt; 3, 3 ..&lt; 3] == 0)

    assert(sum[0 ... 2, 0 ... 2] == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9)
    assert(sum[0 ... 2, 0 ... 1] == 1 + 2 + 4 + 5 + 7 + 8)
    assert(sum[0 ... 1, 0 ... 1] == 1 + 2 + 4 + 5)
    assert(sum[1 ... 1, 1 ... 1] == 5)
    assert(sum[1 ... 1, 1 ... 2] == 5 + 6)
    assert(sum[1 ... 2, 1 ... 2] == 5 + 6 + 8 + 9)
    assert(sum[2 ... 2, 2 ... 2] == 9)

    assert(sum[2 ... 2, ...] == 7 + 8 + 9)
    assert(sum[..., 2 ... 2] == 3 + 6 + 9)

    assert(sum[..., ...] == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9)
}

testStaticRangeSum2D()
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A5A237F2-7C36-46D0-884A-C7B83C3C837A</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Static Range Sum 2D</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
