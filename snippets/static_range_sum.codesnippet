<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>mystaticrangesum</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>struct StaticRangeSum&lt;Element&gt; where Element: AdditiveArithmetic {
    private var prefixSum: [Element]

    init(repeating value: Element, count: Int) {
        prefixSum = [Element]()
        prefixSum.append(.zero)
        for _ in 0 ..&lt; count {
            prefixSum.append(prefixSum.last! + value)
        }
    }

    init&lt;S&gt;(_ sequence: S) where S: Sequence, S.Element == Element {
        prefixSum = [Element]()
        prefixSum.append(.zero)
        for element in sequence {
            prefixSum.append(prefixSum.last! + element)
        }
    }

    subscript(range: UnboundedRange) -&gt; Element {
        prefixSum.last!
    }

    subscript(range: Range&lt;Int&gt;) -&gt; Element {
        prefixSum[range.upperBound] - prefixSum[range.lowerBound]
    }

    subscript&lt;R&gt;(range: R) -&gt; Element where R: RangeExpression, R.Bound == Int {
        self[range.relative(to: 0 ..&lt; prefixSum.count - 1)]
    }
}

func testStaticRangeSum() {
    let sum = StaticRangeSum&lt;Int&gt;([1, 2, 4, 8, 16])

    assert(sum[...] == 1 + 2 + 4 + 8 + 16)

    assert(sum[..&lt;0] == 0)
    assert(sum[..&lt;1] == 1)
    assert(sum[..&lt;2] == 1 + 2)
    assert(sum[..&lt;3] == 1 + 2 + 4)
    assert(sum[..&lt;4] == 1 + 2 + 4 + 8)
    assert(sum[..&lt;5] == 1 + 2 + 4 + 8 + 16)

    assert(sum[...0] == 1)
    assert(sum[...1] == 1 + 2)
    assert(sum[...2] == 1 + 2 + 4)
    assert(sum[...3] == 1 + 2 + 4 + 8)
    assert(sum[...4] == 1 + 2 + 4 + 8 + 16)

    assert(sum[0...] == 1 + 2 + 4 + 8 + 16)
    assert(sum[1...] == 2 + 4 + 8 + 16)
    assert(sum[2...] == 4 + 8 + 16)
    assert(sum[3...] == 8 + 16)
    assert(sum[4...] == 16)

    assert(sum[1 ..&lt; 1] == 0)
    assert(sum[1 ..&lt; 2] == 2)
    assert(sum[1 ..&lt; 3] == 2 + 4)
    assert(sum[1 ..&lt; 4] == 2 + 4 + 8)
    assert(sum[1 ..&lt; 5] == 2 + 4 + 8 + 16)

    assert(sum[1 ... 1] == 2)
    assert(sum[1 ... 2] == 2 + 4)
    assert(sum[1 ... 3] == 2 + 4 + 8)
    assert(sum[1 ... 4] == 2 + 4 + 8 + 16)
}

testStaticRangeSum()
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>CDF4DB1B-5273-4590-A5CF-031DB4204DB7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Static Range Sum</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
