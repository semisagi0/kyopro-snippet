<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>myrational</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>struct Rational: ExpressibleByIntegerLiteral, AdditiveArithmetic, Comparable, Hashable, CustomStringConvertible {
    private let a: Int
    private let b: Int

    static var zero: Self = .init(0, 1)

    init(integerLiteral value: IntegerLiteralType) {
        self.init(value)
    }

    init(_ a: Int) {
        self.a = a
        self.b = 1
    }

    init(_ a: Int, _ b: Int) {
        assert(b != 0)
        let g = Rational.gcd(abs(a), abs(b))
        if b &gt; 0 {
            self.a = a / g
            self.b = b / g
        } else {
            self.a = -a / g
            self.b = -b / g
        }
    }

    private static func gcd(_ x: Int, _ y: Int) -&gt; Int {
        if y == 0 {
            return x
        } else {
            return gcd(y, x % y)
        }
    }

    static prefix func - (value: Self) -&gt; Self {
        Self(-value.a, value.b)
    }

    static func + (lhs: Self, rhs: Self) -&gt; Self {
        Self(lhs.a * rhs.b + rhs.a * lhs.b, lhs.b * rhs.b)
    }

    static func += (lhs: inout Self, rhs: Self) {
        lhs = lhs + rhs
    }

    static func - (lhs: Self, rhs: Self) -&gt; Self {
        lhs + -rhs
    }

    static func -= (lhs: inout Self, rhs: Self) {
        lhs = lhs - rhs
    }

    static func * (lhs: Self, rhs: Self) -&gt; Self {
        Self(lhs.a * rhs.a, lhs.b * rhs.b)
    }

    static func *= (lhs: inout Self, rhs: Self) {
        lhs = lhs * rhs
    }

    static func / (lhs: Self, rhs: Self) -&gt; Self {
        Self(lhs.a * rhs.b, lhs.b * rhs.a)
    }

    static func /= (lhs: inout Self, rhs: Self) {
        lhs = lhs / rhs
    }

    static func &lt; (lhs: Self, rhs: Self) -&gt; Bool {
        lhs.a * rhs.b &lt; rhs.a * lhs.b
    }

    var description: String {
        String(a) + "/" + String(b)
    }
}

func testRational() {
    func testInit() {
        assert(Rational(-1, 2) == Rational(1, -2))
        assert(Rational(-1, -2) == Rational(1, 2))
        assert(Rational(-2, -4) == Rational(1, 2))
        assert(Rational(-2, 4) == Rational(-1, 2))
        assert(Rational(2, -4) == Rational(-1, 2))
    }

    func testAddition() {
        assert(Rational(1, 2) + Rational(1, 3) == Rational(5, 6))
        assert(Rational(2, 4) + Rational(2, 6) == Rational(5, 6))
    }

    func testSubtraction() {
        assert(Rational(1, 2) - Rational(1, 3) == Rational(1, 6))
        assert(Rational(1, 3) - Rational(1, 2) == Rational(-1, 6))
    }

    func testMultiplication() {
        assert(Rational(2, 3) * Rational(5, 7) == Rational(10, 21))
        assert(Rational(2, 6) * Rational(10, 7) == Rational(10, 21))
        assert(Rational(-2, 3) * Rational(5, 7) == Rational(-10, 21))
        assert(Rational(2, 3) * Rational(-5, 7) == Rational(-10, 21))
        assert(Rational(-2, 3) * Rational(-5, 7) == Rational(10, 21))
    }

    func testDivision() {
        assert(Rational(2, 3) / Rational(5, 7) == Rational(14, 15))
        assert(Rational(2, 6) / Rational(10, 7) == Rational(7, 30))
        assert(Rational(-2, 3) / Rational(5, 7) == Rational(-14, 15))
        assert(Rational(2, 3) / Rational(-5, 7) == Rational(-14, 15))
        assert(Rational(-2, 3) / Rational(-5, 7) == Rational(14, 15))
    }

    func testLessThan() {
        assert(Rational(1, 3) &lt; Rational(1, 2))
        assert(!(Rational(1, 2) &lt; Rational(1, 2)))
        assert(!(Rational(1, 2) &lt; Rational(1, 3)))
    }

    testInit()
    testAddition()
    testSubtraction()
    testMultiplication()
    testDivision()
    testLessThan()
}

testRational()</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>C967077E-6583-4D82-AD4D-E8C8A06EFFEF</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Rational</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
